# This file represents a workflow of manually packaging and release. Usually,
# this workflow has two mainly uses: 1. Debug a release version of a specific
# Ubuntu version while you have got some problems in normal release process. 2.
# Manually release an urgent version on ubuntu. If you are interesting with
# normal release process, you may refer to packaging_and_release_for_xxx.yml

name: Manually Packaging and Release For Ubuntu
on:
  workflow_dispatch:
    inputs:
      whether-upload:
        description: |
          Whether upload artifacts to the Github release page.
          If enabled this option, you must
            1. run this workflow from a tag branch
            2. make sure the version number corresponds to the tag number
          Also, you can just ignore this option if you only want to debug.
        required: true
        default: false
        type: boolean
      release-version:
        description: "Release Version. Usually, it's format is xx.xx.xx"
        required: false
        type: string
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: choice
        options:
          - ubuntu-20.04
          - ubuntu-22.04
          - ubuntu-24.04
        default: ubuntu-24.04
      compiler:
        description: "The compiler to build artifacts"
        required: true
        type: choice
        options:
          - gcc-14.2.0
          - gcc-13.2.1
          - clang-15.0.1
        default: gcc-14.2.0
      cpp-flags:
        description: "The cpp flags to build artifacts"
        type: string
      build-type:
        description: "The build type of this artifacts"
        type: choice
        options:
          - Debug
          - Release
        default: Release
      tests:
        description: "Which test suites to run during release"
        type: choice
        options:
          - Unittests
          - None
        default: Unittests

permissions:
  contents: write
  discussions: write

jobs:
  build-test-package-release:
    name: "cpp-linter ${{ inputs.release-version }} ${{ inputs.runs-on }} ${{ inputs.compiler }}  whether-upload-${{ inputs.whether-upload }}"
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Validate and Set Variables
        id: var
        shell: bash
        run: |
          # Check version string.
          release_version=$(echo ${{ inputs.release-version }} | xargs)
          if [[ "${{ inputs.whether-upload }}" = "true" ]]; then
            if [[ ! "${release_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Release VERSION format is uncorrect. release-version: ${release_version}"
              exit -1
            fi
          fi

          # Check and set compiler.
          compiler=$(echo ${{ inputs.compiler }} | cut -d'-' -f1)
          compiler_version=$(echo ${{ inputs.compiler }} | cut -d'-' -f2)
          major=$(echo ${compiler_version} | cut -d'.' -f1)
          if [[ "${compiler}" == "clang" ]]; then
            echo "CC=clang-${major}" >> ${GITHUB_ENV}
            echo "CXX=clang++-${major}" >> ${GITHUB_ENV}
            echo "Set compiler: CXX: clang++-${major}"
          else
            echo "CC=gcc-${major}" >> ${GITHUB_ENV}
            echo "CXX=g++-${major}" >> ${GITHUB_ENV}
            echo "Set compiler: CXX: g++-${major}"
          fi

          echo "release_version=${release_version}" >> ${GITHUB_OUTPUT}
          echo "pkg_name=cpp_linter_${release_version}_${{ inputs.runs-on }}_${{ runner.arch }}" >> ${GITHUB_OUTPUT}

      - name: Install Building Dependencies
        run: |
          sudo apt install -y ninja-build;
          sudo apt install -y libboost-all-dev;
          sudo apt install -y libgit2-dev;

      - name: CMake
        run: |
          set -ex;
          cmake -S . -B build -GNinja \
            -DCMAKE_CXX_FLAGS="${{ inputs.cpp-flags }}" \
            -DCMAKE_BUILD_TYPE="${{ inputs.build-type }}";

      - name: Compile
        run: |
          cmake --build build -v

      - name: Run Unittests
        if: ${{ inputs.tests }} == "Unittests"
        run: |
          ./build/tests/test

      - name: Install Packaging Dependencies
        run: |
          bash scripts/linux/install_patchelf.sh
          bash scripts/linux/install_lddtree.sh

      - name: Package
        run: |
           bash scripts/linux/ubuntu/package.sh

      - name: Rename Distributions
        shell: bash
        run: |
          mv build/cpp-linter-dist.tar.gz build/${{ steps.var.outputs.pkg_name }}.tar.gz

      - name: Release to Github Release Page
        if: ${{ inputs.whether-upload }} == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.var.outputs.release_version }}
          files: |
            build/${{ steps.var.outputs.pkg_name }}.tar.gz


