name: Manually Packaging and Release For Ubuntu
on:
  push:
    branches: [main]
    paths:
      - VERSION
  pull-request:
    branches: [main]
    paths:
      - VERSION

  # Manually release or debug the new version.
  workflow_dispatch:
    inputs:
      release-version:
        description: "Release Version"
        required: true
        type: string
      whether-upload:
        description: "Whether upload artifacts to the release page"
        required: true
        default: false
        type: boolean
      runs-on:
        description: "Runner to use for the build"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-24.04
        default: ubuntu-22.04
      compiler:
        description: "Compiler to build artifacts"
        required: true
        type: choice
        options:
          - gcc-14.2.0
          - gcc-13.2.1
          - clang-15.0.1
        default: gcc-14.2.0
      cpp-flags:
        description: "cpp flags"
        type: string
      build-type:
        description: "CMake c++ build type"
        type: choice
        options:
          - Debug
          - Release
        default: Release


jobs:
  build-test-package-release:
    name: "Release ${{ inputs.runs-on }} ${{ inputs.compiler }} ${{ inputs.release-version }} Upload-${{ inputs.whether-upload }}"
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Validate Variable
        id: var
        shell: bash
        run: |
          # Check version string.
          if [[ "${{ github.event }}" = "workflow_dispatch" ]]; then
            version=$(echo ${{ inputs.release-version }} | xargs)
          else
            if [[ ! -f "VERSION" ]]; then
              echo "VERSION file not exists."
              exit -1
            fi
            version=$(cat VERSION)
          fi
          if [[ "${{ github.event }}" = "push" ]] || [[ "${{ inputs.whether-upload }}" = "true" ]]; then
            if [[ ! "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "VERSION format is uncorrect. version: ${version}"
              exit -1
            fi
          fi

          # Compiler
          compiler=$(echo ${{ inputs.compiler }} | cut -d'-' -f1)
          compiler_version=$(echo ${{ inputs.compiler }} | cut -d'-' -f2)
          major=$(echo ${compiler_version} | cut -d'.' -f1)
          if [[ "${compiler}" == "clang" ]]; then
            echo "CC=clang-${major}" >> ${GITHUB_ENV}
            echo "CXX=clang++-${major}" >> ${GITHUB_ENV}
          else
            echo "CC=gcc-${major}" >> ${GITHUB_ENV}
            echo "CXX=g++-${major}" >> ${GITHUB_ENV}
          fi
          echo "${CC}, ${CXX}"

          echo "release-version=${version}">> ${GITHUB_OUTPUT}
          echo "whether-upload=${whether-upload}">> ${GITHUB_OUTPUT}
          echo "bin-basename=${{ runner.os }}-${{ runner.arch }}">> ${GITHUB_OUTPUT}
          echo "compiler=${compiler}">> ${GITHUB_OUTPUT}
          echo "compiler-version=${compiler_version}">> ${GITHUB_OUTPUT}

      - name: Install Building Dependencies
        run: |
          sudo apt install ninja-build;
          sudo apt install libboost-all-dev;
          sudo apt install libgit2-dev;

      - name: CMake
        run: |
          set -ex;
          cmake -S . -B build -GNinja \
            -DCMAKE_CXX_FLAGS="${{ inputs.cpp-flags }}" \
            -DCMAKE_BUILD_TYPE="${{ inputs.build-type }}";

      - name: Compile
        run: |
          cmake --build build -v

      - name: Run Unittests
        run: |
          ./build/tests/test_git;

      - name: Install Packaging Dependencies
        run: |
          sudo apt install pax-utils

      - name: Pack
        run: |
          sudo ./package.sh

      - name: Upload
        if: steps.var.whether-upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: "linter-${{ steps.var.bin-basename }}-${{ steps.var.release-version }}"
          path: build/linter.tar.gz
          if-no-files-found: error


